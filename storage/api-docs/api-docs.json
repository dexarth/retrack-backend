{
    "openapi": "3.0.0",
    "info": {
        "title": "Retrack API",
        "description": "A simple API to get weather information.",
        "version": "1.0.0"
    },
    "paths": {
        "/api/form-submit/{formName}": {
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Submit data for a multi-table form",
                "description": "Handles dynamic form submission involving multiple related tables using configured table_relations.",
                "operationId": "f528bdef5c0061c27496a871a33420d7",
                "parameters": [
                    {
                        "name": "formName",
                        "in": "path",
                        "description": "The identifier for the form defined in table_relations (e.g., mentor_form)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload should contain objects for each table defined in the relation. The primary table data and related table data must be included.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {},
                            "example": {
                                "users": {
                                    "name": "Ali",
                                    "email": "ali@example.com",
                                    "password": "secret123"
                                },
                                "mentors": {
                                    "pangkat": "SARJAN",
                                    "parol_daerah": "BEAUFORT"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Data submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Data submitted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Form relation not defined or invalid data structure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Form relation not defined."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Model class not found for a table",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Model not found for this table."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to submit data due to a server error or DB constraint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Submission failed"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "SQLSTATE[23000]: Integrity constraint violation..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/form-submit/{formName}/{id}": {
            "put": {
                "tags": [
                    "Form"
                ],
                "summary": "Update data for a multi-table form",
                "description": "Handles dynamic form update involving multiple related tables using configured table_relations. Tracks changes with a log.",
                "operationId": "51b538d597c8fba772d5797c16eb047b",
                "parameters": [
                    {
                        "name": "formName",
                        "in": "path",
                        "description": "The identifier for the form defined in table_relations (e.g., mentor_form)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the primary record to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload containing objects for each related table defined in the form relation. Includes primary and related table data for update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {},
                            "example": {
                                "users": {
                                    "name": "Ali Updated",
                                    "email": "ali_updated@example.com"
                                },
                                "mentors": {
                                    "pangkat": "SARJAN UPDATED",
                                    "parol_daerah": "BEAUFORT UPDATED"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Data updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Data updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Form relation not defined or invalid data structure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Form relation not defined."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Model class or record not found for a table",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Model or record not found for this table."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update data due to a server error or DB constraint",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Update failed"
                                        },
                                        "details": {
                                            "type": "string",
                                            "example": "SQLSTATE[23000]: Integrity constraint violation..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/listing/{table}": {
            "get": {
                "tags": [
                    "Listing"
                ],
                "summary": "Get listing of a table",
                "description": "Returns all data from a whitelisted table using its associated model.",
                "operationId": "c98ee4534af8855610f7f82d282e1f3a",
                "parameters": [
                    {
                        "name": "table",
                        "in": "path",
                        "description": "The name of the table to list data from (must be in the allowed list)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Table not allowed"
                    },
                    "404": {
                        "description": "Model not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/form-show/{formName}/{id}": {
            "get": {
                "tags": [
                    "Listing"
                ],
                "summary": "Fetch single record (multi-table or single-table)",
                "description": "Returns single record based on a form relation (multi-table) or from a single table if no relation is found.",
                "operationId": "4cb8c79e753c3d2057e13915857c673d",
                "parameters": [
                    {
                        "name": "formName",
                        "in": "path",
                        "description": "Form name (from table_relations) or table name (for single table)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Primary record ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Record retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Model or record not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/me": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get authenticated user details",
                "operationId": "aef6fdddec1e8495d4830821b4afdf54",
                "responses": {
                    "200": {
                        "description": "Authenticated user info with role",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "type": "object"
                                        },
                                        "role": {
                                            "type": "string",
                                            "example": "admin"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login user and get token",
                "description": "Login user and return bearer token",
                "operationId": "0fc9610184083ac6dddab2c63139225a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        },
                                        "user": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout authenticated user",
                "description": "Revoke the current access token",
                "operationId": "67d5147477c548bfbc3f982833bbc7bd",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/weather/{city}": {
            "get": {
                "tags": [
                    "Weather"
                ],
                "summary": "Get weather by city",
                "description": "Returns weather data for the given city.",
                "operationId": "f6ae373213401976f6a4b321343be86b",
                "parameters": [
                    {
                        "name": "city",
                        "in": "path",
                        "description": "City name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Weather data for the city",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "city": {
                                            "type": "string",
                                            "example": "New York"
                                        },
                                        "temperature": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 28.5
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Clear sky"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "City not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Form",
            "description": "Form"
        },
        {
            "name": "Listing",
            "description": "Listing"
        },
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Weather",
            "description": "Weather"
        }
    ],
    "security": [
        {
            "sanctum": []
        }
    ]
}